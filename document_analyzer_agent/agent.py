import argparse
import base64
import logging
import os
import uuid
from langfuse import observe
from strands import Agent
from strands.multiagent import GraphBuilder
from strands.telemetry import StrandsTelemetry
from strands.types.content import ContentBlock
from strands_tools import file_write, image_reader, shell
from tools import pdf_to_png
from utils.credentials_loader import load_credentials

# Parse command line arguments
parser = argparse.ArgumentParser(description='Document analyzer agent')
parser.add_argument('--context', type=str, help='Additional context for image analysis', default=None)
parser.add_argument('--documents_path', type=str, help='Path to the folder containing documents to analyze', default=f"{os.getcwd()}/document_analyzer_agent/documents")
parser.add_argument('--output_path', type=str, help='Path to the folder where output reports will be saved', default=f"{os.getcwd()}/document_analyzer_agent/output")

args = parser.parse_args()
documents_folder_path = args.documents_path
output_folder_path = args.output_path

# Ensure output directory exists
os.makedirs(output_folder_path, exist_ok=True)

# Load credentials from properties file
credentials_file = os.path.join(os.path.dirname(__file__), "credentials.properties")
credentials = load_credentials(credentials_file)

# Set environment variables for Langfuse if found in credentials file
if credentials["LANGFUSE_PUBLIC_KEY"]:
    os.environ["LANGFUSE_PUBLIC_KEY"] = credentials["LANGFUSE_PUBLIC_KEY"]
if credentials["LANGFUSE_SECRET_KEY"]:
    os.environ["LANGFUSE_SECRET_KEY"] = credentials["LANGFUSE_SECRET_KEY"]
if credentials["LANGFUSE_HOST"]:
    os.environ["LANGFUSE_HOST"] = credentials["LANGFUSE_HOST"]
 
# Build Basic Auth header.
LANGFUSE_AUTH = base64.b64encode(
    f"{os.environ.get('LANGFUSE_PUBLIC_KEY')}:{os.environ.get('LANGFUSE_SECRET_KEY')}".encode()
).decode()
 
# Configure OpenTelemetry endpoint & headers
os.environ["OTEL_EXPORTER_OTLP_ENDPOINT"] = os.environ.get("LANGFUSE_HOST") + "/api/public/otel"
os.environ["OTEL_EXPORTER_OTLP_HEADERS"] = f"Authorization=Basic {LANGFUSE_AUTH}"


# Configure the telemetry
# (Creates new tracer provider and sets it as global)
strands_telemetry = StrandsTelemetry().setup_otlp_exporter()

# Enables Strands debug log level
logging.getLogger("strands").setLevel(logging.DEBUG)

# Sets the logging format and streams logs to stderr
logging.basicConfig(
    format="%(levelname)s | %(name)s | %(message)s",
    handlers=[logging.StreamHandler()]
)

# Create agents for image processing workflow
session_id = str(uuid.uuid4())
user_id = os.getlogin()

trace_attributes={
    "session.id": f"session-{session_id}",
    "user.id": user_id,
    "langfuse.tags": [
        "strands-agent-document-analyzer"
    ]
}

image_analyzer = Agent(
    system_prompt=
        f'''
            You are an image analysis expert. Analyze all images in the provided documents folder.
            
            YOU MUST analyze PDF files by first converting them to PNG images using the pdf_to_png tool.
            
            When you encounter a PDF file:
            1. Use the pdf_to_png tool to convert it to PNG images
            2. Use the image_reader tool to read the generated PNG images
            3. Analyze the images as you would with any other image
            4. Delete the images generated by the pdf_to_png tool

            ONLY ANALYZE the image(s) and provide the following information in a well structured format that is easy to consume and process:
                1. Summary of image analysis
                2. Insights on any trends or themes that you have observed

            DO NOT CREATE the Markdown report as there is a separate agent that owns this responsibility. You are only providing information to that agent.
        ''',
    name="Image Analysis Agent",
    model="us.anthropic.claude-3-7-sonnet-20250219-v1:0",
    tools=[image_reader, shell, pdf_to_png],
    trace_attributes=trace_attributes
)

report_generator = Agent(
    system_prompt=
        f'''
            You are an Markdown report generation expert. Generate a report based on the provided analysis of the image(s).
            
            You will be provided the following information:
                1. Summary of analysis
                2. Insights on any trends or themes
                
            Save the report in the directory that will be specified in the instructions.
        ''',
    name="Markdown Report Generation Agent",
    model="us.anthropic.claude-3-7-sonnet-20250219-v1:0",
    tools=[file_write],
    trace_attributes=trace_attributes
)        

# Build the graph
builder = GraphBuilder()
builder.add_node(image_analyzer, "image_analyzer")
builder.add_node(report_generator, "report_generator")
builder.add_edge("image_analyzer", "report_generator")
builder.set_entry_point("image_analyzer")

graph = builder.build()

@observe(name="ImageAnalysisWorkflow")
def execute_graph():

    # Create initial content block with instructions and optional context
    instruction_text = f"Analyze the provided images or PDF files in the documents directory ({documents_folder_path}) and create a Markdown report that provides high level insights and metrics. Save the report in the directory {output_folder_path}. Please output the path to the generated report."
    if args.context:
        instruction_text += f"\n\nAdditional context for analysis: {args.context}"

    content_blocks = [
        ContentBlock(text=instruction_text)
    ]

    # Execute the graph with multi-modal input
    result = graph(content_blocks)

execute_graph()
